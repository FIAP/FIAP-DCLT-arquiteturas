#!/bin/bash

# Script para iniciar todos os microservices do Sistema de Investimentos
# Autor: Sistema Investimentos
# Vers√£o: 1.0.0

echo "üöÄ Iniciando Sistema de Investimentos - Microservices"
echo "=================================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√£o para verificar se o Node.js est√° instalado
check_node() {
    if ! command -v node &> /dev/null; then
        echo -e "${RED}‚ùå Node.js n√£o est√° instalado. Por favor, instale o Node.js primeiro.${NC}"
        exit 1
    fi
    echo -e "${GREEN}‚úÖ Node.js encontrado: $(node --version)${NC}"
}

# Fun√ß√£o para verificar se o npm est√° instalado
check_npm() {
    if ! command -v npm &> /dev/null; then
        echo -e "${RED}‚ùå npm n√£o est√° instalado. Por favor, instale o npm primeiro.${NC}"
        exit 1
    fi
    echo -e "${GREEN}‚úÖ npm encontrado: $(npm --version)${NC}"
}

# Fun√ß√£o para instalar depend√™ncias de um servi√ßo
install_dependencies() {
    local service_name=$1
    local service_path=$2
    
    echo -e "${YELLOW}üì¶ Instalando depend√™ncias para ${service_name}...${NC}"
    cd "$service_path"
    
    if [ ! -d "node_modules" ]; then
        npm install
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}‚úÖ Depend√™ncias instaladas para ${service_name}${NC}"
        else
            echo -e "${RED}‚ùå Erro ao instalar depend√™ncias para ${service_name}${NC}"
            return 1
        fi
    else
        echo -e "${CYAN}‚ÑπÔ∏è  Depend√™ncias j√° instaladas para ${service_name}${NC}"
    fi
    
    cd - > /dev/null
}

# Fun√ß√£o para iniciar um servi√ßo em background
start_service() {
    local service_name=$1
    local service_path=$2
    local port=$3
    local color=$4
    
    echo -e "${color}üîÑ Iniciando ${service_name} na porta ${port}...${NC}"
    cd "$service_path"
    
    # Criar arquivo de log
    mkdir -p ../logs
    local log_file="../logs/${service_name}.log"
    
    # Iniciar servi√ßo em background
    npm run dev > "$log_file" 2>&1 &
    local pid=$!
    
    # Salvar PID para poder parar depois
    echo $pid > "../logs/${service_name}.pid"
    
    echo -e "${GREEN}‚úÖ ${service_name} iniciado (PID: $pid)${NC}"
    echo -e "${CYAN}üìã Log: $log_file${NC}"
    
    cd - > /dev/null
    
    # Aguardar um pouco para o servi√ßo inicializar
    sleep 2
}

# Fun√ß√£o para verificar se uma porta est√° em uso
check_port() {
    local port=$1
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null ; then
        echo -e "${YELLOW}‚ö†Ô∏è  Porta $port j√° est√° em uso${NC}"
        return 1
    fi
    return 0
}

# Fun√ß√£o para parar todos os servi√ßos
stop_all_services() {
    echo -e "${YELLOW}üõë Parando todos os servi√ßos...${NC}"
    
    if [ -d "logs" ]; then
        for pid_file in logs/*.pid; do
            if [ -f "$pid_file" ]; then
                local pid=$(cat "$pid_file")
                local service_name=$(basename "$pid_file" .pid)
                
                if kill -0 $pid 2>/dev/null; then
                    echo -e "${YELLOW}üõë Parando ${service_name} (PID: $pid)...${NC}"
                    kill $pid
                    rm "$pid_file"
                else
                    echo -e "${CYAN}‚ÑπÔ∏è  ${service_name} j√° estava parado${NC}"
                    rm "$pid_file"
                fi
            fi
        done
    fi
    
    echo -e "${GREEN}‚úÖ Todos os servi√ßos foram parados${NC}"
}

# Fun√ß√£o para mostrar status dos servi√ßos
show_status() {
    echo -e "${BLUE}üìä Status dos Servi√ßos:${NC}"
    echo "========================"
    
    local services=(
        "identity-service:3001"
        "asset-service:3002"
        "portfolio-service:3003"
        "transaction-service:3004"
        "financial-service:3005"
        "api-gateway:3000"
    )
    
    for service_port in "${services[@]}"; do
        local service_name=$(echo $service_port | cut -d: -f1)
        local port=$(echo $service_port | cut -d: -f2)
        
        if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null ; then
            echo -e "${GREEN}‚úÖ ${service_name} - Rodando na porta ${port}${NC}"
        else
            echo -e "${RED}‚ùå ${service_name} - N√£o est√° rodando na porta ${port}${NC}"
        fi
    done
    
    echo ""
    echo -e "${CYAN}üåê URLs dos Servi√ßos:${NC}"
    echo "  ‚Ä¢ API Gateway: http://localhost:3000"
    echo "  ‚Ä¢ Identity Service: http://localhost:3001"
    echo "  ‚Ä¢ Asset Service: http://localhost:3002"
    echo "  ‚Ä¢ Portfolio Service: http://localhost:3003"
    echo "  ‚Ä¢ Transaction Service: http://localhost:3004"
    echo "  ‚Ä¢ Financial Service: http://localhost:3005"
    echo ""
    echo -e "${PURPLE}üìö Documenta√ß√£o: http://localhost:3000/api-docs${NC}"
    echo -e "${PURPLE}üìä Status Geral: http://localhost:3000/services/status${NC}"
}

# Fun√ß√£o principal
main() {
    # Verificar argumentos
    case "$1" in
        "start")
            echo -e "${BLUE}üöÄ Iniciando todos os microservices...${NC}"
            ;;
        "stop")
            stop_all_services
            exit 0
            ;;
        "status")
            show_status
            exit 0
            ;;
        "restart")
            echo -e "${YELLOW}üîÑ Reiniciando todos os microservices...${NC}"
            stop_all_services
            sleep 3
            ;;
        *)
            echo "Uso: $0 {start|stop|status|restart}"
            echo ""
            echo "Comandos:"
            echo "  start   - Inicia todos os microservices"
            echo "  stop    - Para todos os microservices"
            echo "  status  - Mostra status dos servi√ßos"
            echo "  restart - Reinicia todos os microservices"
            exit 1
            ;;
    esac
    
    # Verificar pr√©-requisitos
    echo -e "${BLUE}üîç Verificando pr√©-requisitos...${NC}"
    check_node
    check_npm
    
    # Criar diret√≥rio de logs
    mkdir -p logs
    
    # Verificar se estamos no diret√≥rio correto
    if [ ! -d "identity-service" ] || [ ! -d "api-gateway" ]; then
        echo -e "${RED}‚ùå Execute este script do diret√≥rio microservices${NC}"
        exit 1
    fi
    
    # Instalar depend√™ncias para todos os servi√ßos
    echo -e "${BLUE}üì¶ Instalando depend√™ncias...${NC}"
    install_dependencies "Identity Service" "identity-service" || exit 1
    install_dependencies "Asset Service" "asset-service" || exit 1
    install_dependencies "Portfolio Service" "portfolio-service" || exit 1
    install_dependencies "Transaction Service" "transaction-service" || exit 1
    install_dependencies "Financial Service" "financial-service" || exit 1
    install_dependencies "API Gateway" "api-gateway" || exit 1
    
    echo ""
    echo -e "${BLUE}üöÄ Iniciando servi√ßos...${NC}"
    
    # Iniciar servi√ßos na ordem correta (depend√™ncias primeiro)
    start_service "identity-service" "identity-service" "3001" "$GREEN"
    start_service "asset-service" "asset-service" "3002" "$YELLOW"
    start_service "portfolio-service" "portfolio-service" "3003" "$BLUE"
    start_service "transaction-service" "transaction-service" "3004" "$PURPLE"
    start_service "financial-service" "financial-service" "3005" "$CYAN"
    
    # Aguardar um pouco mais para os servi√ßos estabilizarem
    echo -e "${YELLOW}‚è≥ Aguardando servi√ßos estabilizarem...${NC}"
    sleep 5
    
    # Iniciar API Gateway por √∫ltimo
    start_service "api-gateway" "api-gateway" "3000" "$RED"
    
    echo ""
    echo -e "${GREEN}üéâ Todos os microservices foram iniciados!${NC}"
    echo ""
    
    # Aguardar mais um pouco e mostrar status
    sleep 3
    show_status
    
    echo ""
    echo -e "${YELLOW}üí° Dicas:${NC}"
    echo "  ‚Ä¢ Use 'tail -f logs/[service-name].log' para ver logs em tempo real"
    echo "  ‚Ä¢ Use '$0 stop' para parar todos os servi√ßos"
    echo "  ‚Ä¢ Use '$0 status' para verificar o status"
    echo "  ‚Ä¢ Use Ctrl+C para sair (servi√ßos continuar√£o rodando)"
    echo ""
    echo -e "${GREEN}‚ú® Sistema pronto para uso!${NC}"
}

# Capturar Ctrl+C para limpeza
trap 'echo -e "\n${YELLOW}üëã Script finalizado. Servi√ßos continuam rodando.${NC}"; exit 0' INT

# Executar fun√ß√£o principal
main "$@" 