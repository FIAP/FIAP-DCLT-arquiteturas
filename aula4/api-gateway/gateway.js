const express = require('express');
const { createProxyMiddleware } = require('http-proxy-middleware');
const cors = require('cors');
const morgan = require('morgan');
const axios = require('axios');

const app = express();
const PORT = 8080;

// Middleware
app.use(cors());
app.use(express.json());
app.use(morgan('combined')); // Logging de requisi√ß√µes

// Configura√ß√£o dos microservi√ßos
const SERVICOS = {
  usuarios: 'http://localhost:6001',
  produtos: 'http://localhost:6002', 
  pedidos: 'http://localhost:6003'
};

// Middleware de autentica√ß√£o simples
const autenticacao = (req, res, next) => {
  const token = req.headers.authorization;
  
  // Simular valida√ß√£o de token
  if (!token || !token.startsWith('Bearer ')) {
    console.log('‚ùå [GATEWAY] Requisi√ß√£o sem token de autoriza√ß√£o');
    return res.status(401).json({
      erro: 'Token de autoriza√ß√£o necess√°rio',
      message: 'Inclua o header: Authorization: Bearer <token>'
    });
  }
  
  const tokenValue = token.replace('Bearer ', '');
  
  // Tokens v√°lidos para o exemplo
  const tokensValidos = ['token123', 'admin456', 'user789'];
  
  if (!tokensValidos.includes(tokenValue)) {
    console.log('‚ùå [GATEWAY] Token inv√°lido:', tokenValue);
    return res.status(403).json({
      erro: 'Token inv√°lido'
    });
  }
  
  console.log('‚úÖ [GATEWAY] Token v√°lido:', tokenValue);
  req.usuario = { token: tokenValue }; // Simular dados do usu√°rio
  next();
};

// Middleware de rate limiting simples
const rateLimiter = {};
const rateLimit = (req, res, next) => {
  const ip = req.ip;
  const agora = Date.now();
  const janela = 60000; // 1 minuto
  const limite = 10; // 10 requisi√ß√µes por minuto
  
  if (!rateLimiter[ip]) {
    rateLimiter[ip] = { count: 1, resetTime: agora + janela };
  } else {
    if (agora > rateLimiter[ip].resetTime) {
      rateLimiter[ip] = { count: 1, resetTime: agora + janela };
    } else {
      rateLimiter[ip].count++;
    }
  }
  
  if (rateLimiter[ip].count > limite) {
    console.log('‚ö†Ô∏è [GATEWAY] Rate limit excedido para IP:', ip);
    return res.status(429).json({
      erro: 'Muitas requisi√ß√µes',
      message: `Limite de ${limite} requisi√ß√µes por minuto excedido`
    });
  }
  
  next();
};

// Health check do gateway
app.get('/health', (req, res) => {
  res.json({
    status: 'Gateway funcionando',
    timestamp: new Date().toISOString(),
    servicos: SERVICOS
  });
});

// Endpoint para obter informa√ß√µes sobre os servi√ßos
app.get('/servicos/status', async (req, res) => {
  console.log('üìä [GATEWAY] Verificando status dos servi√ßos...');
  
  const status = {};
  
  for (const [nome, url] of Object.entries(SERVICOS)) {
    try {
      const response = await axios.get(`${url}/health`, { timeout: 2000 });
      status[nome] = { 
        url, 
        status: 'online', 
        dados: response.data 
      };
      console.log(`‚úÖ [GATEWAY] Servi√ßo ${nome} est√° online`);
    } catch (error) {
      status[nome] = { 
        url, 
        status: 'offline', 
        erro: error.message 
      };
      console.log(`‚ùå [GATEWAY] Servi√ßo ${nome} est√° offline`);
    }
  }
  
  res.json({
    gateway: 'online',
    timestamp: new Date().toISOString(),
    servicos: status
  });
});

// Roteamento para servi√ßo de usu√°rios
app.use('/api/usuarios', rateLimit, autenticacao, createProxyMiddleware({
  target: SERVICOS.usuarios,
  changeOrigin: true,
  pathRewrite: {
    '^/api/usuarios': '' // Remove /api/usuarios do path
  },
  onProxyReq: (proxyReq, req, res) => {
    console.log(`üîÑ [GATEWAY] Roteando para usu√°rios: ${req.method} ${req.url}`);
  },
  onProxyRes: (proxyRes, req, res) => {
    console.log(`‚úÖ [GATEWAY] Resposta do servi√ßo usu√°rios: ${proxyRes.statusCode}`);
  },
  onError: (err, req, res) => {
    console.log(`‚ùå [GATEWAY] Erro ao comunicar com servi√ßo usu√°rios:`, err.message);
    res.status(503).json({
      erro: 'Servi√ßo usu√°rios indispon√≠vel',
      message: err.message
    });
  }
}));

// Roteamento para servi√ßo de produtos
app.use('/api/produtos', rateLimit, autenticacao, createProxyMiddleware({
  target: SERVICOS.produtos,
  changeOrigin: true,
  pathRewrite: {
    '^/api/produtos': ''
  },
  onProxyReq: (proxyReq, req, res) => {
    console.log(`üîÑ [GATEWAY] Roteando para produtos: ${req.method} ${req.url}`);
  },
  onProxyRes: (proxyRes, req, res) => {
    console.log(`‚úÖ [GATEWAY] Resposta do servi√ßo produtos: ${proxyRes.statusCode}`);
  },
  onError: (err, req, res) => {
    console.log(`‚ùå [GATEWAY] Erro ao comunicar com servi√ßo produtos:`, err.message);
    res.status(503).json({
      erro: 'Servi√ßo produtos indispon√≠vel',
      message: err.message
    });
  }
}));

// Roteamento para servi√ßo de pedidos
app.use('/api/pedidos', rateLimit, autenticacao, createProxyMiddleware({
  target: SERVICOS.pedidos,
  changeOrigin: true,
  pathRewrite: {
    '^/api/pedidos': ''
  },
  onProxyReq: (proxyReq, req, res) => {
    console.log(`üîÑ [GATEWAY] Roteando para pedidos: ${req.method} ${req.url}`);
  },
  onProxyRes: (proxyRes, req, res) => {
    console.log(`‚úÖ [GATEWAY] Resposta do servi√ßo pedidos: ${proxyRes.statusCode}`);
  },
  onError: (err, req, res) => {
    console.log(`‚ùå [GATEWAY] Erro ao comunicar com servi√ßo pedidos:`, err.message);
    res.status(503).json({
      erro: 'Servi√ßo pedidos indispon√≠vel',
      message: err.message
    });
  }
}));

// Middleware para rotas n√£o encontradas
app.use('*', (req, res) => {
  console.log(`‚ùå [GATEWAY] Rota n√£o encontrada: ${req.method} ${req.url}`);
  res.status(404).json({
    erro: 'Rota n√£o encontrada',
    message: 'Verifique a documenta√ß√£o da API',
    rotas_disponiveis: [
      'GET /health',
      'GET /servicos/status',
      'GET /api/usuarios',
      'GET /api/produtos', 
      'GET /api/pedidos'
    ]
  });
});

// Iniciar o gateway
app.listen(PORT, () => {
  console.log('üö™ API GATEWAY INICIADO');
  console.log('======================');
  console.log(`üåê Gateway rodando na porta ${PORT}`);
  console.log('üîó Rotas dispon√≠veis:');
  console.log('   GET  /health');
  console.log('   GET  /servicos/status');
  console.log('   *    /api/usuarios/*    -> ' + SERVICOS.usuarios);
  console.log('   *    /api/produtos/*    -> ' + SERVICOS.produtos);
  console.log('   *    /api/pedidos/*     -> ' + SERVICOS.pedidos);
  console.log('');
  console.log('üîí Autentica√ß√£o necess√°ria (Authorization: Bearer <token>)');
  console.log('üìã Tokens v√°lidos: token123, admin456, user789');
  console.log('‚ö° Rate limit: 10 requisi√ß√µes por minuto por IP');
  console.log('');
});

module.exports = app; 