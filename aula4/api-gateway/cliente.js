const axios = require('axios');

// Configura√ß√£o do API Gateway
const GATEWAY_URL = 'http://localhost:8080';
const TOKEN = 'token123'; // Token v√°lido para autentica√ß√£o

// Configurar headers padr√£o
const headers = {
  'Authorization': `Bearer ${TOKEN}`,
  'Content-Type': 'application/json'
};

class ClienteAPIGateway {
  constructor() {
    this.baseURL = GATEWAY_URL;
    this.headers = headers;
  }

  async verificarGateway() {
    try {
      console.log('üîç Verificando status do Gateway...');
      const response = await axios.get(`${this.baseURL}/health`);
      console.log('‚úÖ Gateway online:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erro ao conectar com Gateway:', error.message);
      throw error;
    }
  }

  async verificarServicos() {
    try {
      console.log('üìä Verificando status dos microservi√ßos...');
      const response = await axios.get(`${this.baseURL}/servicos/status`, {
        headers: this.headers
      });
      console.log('üìã Status dos servi√ßos:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erro ao verificar servi√ßos:', error.message);
      throw error;
    }
  }

  // M√©todos para servi√ßo de usu√°rios
  async listarUsuarios() {
    try {
      console.log('üë• Listando usu√°rios via Gateway...');
      const response = await axios.get(`${this.baseURL}/api/usuarios`, {
        headers: this.headers
      });
      console.log('‚úÖ Usu√°rios recebidos:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erro ao listar usu√°rios:', error.response?.data || error.message);
      throw error;
    }
  }

  async buscarUsuario(id) {
    try {
      console.log(`üë§ Buscando usu√°rio ${id} via Gateway...`);
      const response = await axios.get(`${this.baseURL}/api/usuarios/${id}`, {
        headers: this.headers
      });
      console.log('‚úÖ Usu√°rio encontrado:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rio:', error.response?.data || error.message);
      throw error;
    }
  }

  async criarUsuario(nome, email) {
    try {
      console.log(`‚ûï Criando usu√°rio via Gateway: ${nome} (${email})`);
      const response = await axios.post(`${this.baseURL}/api/usuarios`, {
        nome,
        email
      }, { headers: this.headers });
      console.log('‚úÖ Usu√°rio criado:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erro ao criar usu√°rio:', error.response?.data || error.message);
      throw error;
    }
  }

  // M√©todos para servi√ßo de produtos
  async listarProdutos(categoria = null) {
    try {
      const params = categoria ? `?categoria=${categoria}` : '';
      console.log(`üì¶ Listando produtos via Gateway${categoria ? ' (categoria: ' + categoria + ')' : ''}...`);
      
      const response = await axios.get(`${this.baseURL}/api/produtos${params}`, {
        headers: this.headers
      });
      console.log('‚úÖ Produtos recebidos:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erro ao listar produtos:', error.response?.data || error.message);
      throw error;
    }
  }

  async buscarProduto(id) {
    try {
      console.log(`üì¶ Buscando produto ${id} via Gateway...`);
      const response = await axios.get(`${this.baseURL}/api/produtos/${id}`, {
        headers: this.headers
      });
      console.log('‚úÖ Produto encontrado:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erro ao buscar produto:', error.response?.data || error.message);
      throw error;
    }
  }

  async verificarDisponibilidade(produtoId) {
    try {
      console.log(`üìä Verificando disponibilidade do produto ${produtoId} via Gateway...`);
      const response = await axios.get(`${this.baseURL}/api/produtos/${produtoId}/disponibilidade`, {
        headers: this.headers
      });
      console.log('‚úÖ Disponibilidade:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erro ao verificar disponibilidade:', error.response?.data || error.message);
      throw error;
    }
  }

  // M√©todos para servi√ßo de pedidos
  async listarPedidos() {
    try {
      console.log('üõí Listando pedidos via Gateway...');
      const response = await axios.get(`${this.baseURL}/api/pedidos`, {
        headers: this.headers
      });
      console.log('‚úÖ Pedidos recebidos:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erro ao listar pedidos:', error.response?.data || error.message);
      throw error;
    }
  }

  async criarPedido(usuarioId, produtoId, quantidade) {
    try {
      console.log(`üõí Criando pedido via Gateway: usu√°rio ${usuarioId}, produto ${produtoId}, qtd ${quantidade}`);
      const response = await axios.post(`${this.baseURL}/api/pedidos`, {
        usuario_id: usuarioId,
        produto_id: produtoId,
        quantidade
      }, { headers: this.headers });
      console.log('‚úÖ Pedido criado:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erro ao criar pedido:', error.response?.data || error.message);
      throw error;
    }
  }

  async obterRelatorioPedidos() {
    try {
      console.log('üìä Obtendo relat√≥rio de pedidos via Gateway...');
      const response = await axios.get(`${this.baseURL}/api/pedidos/relatorio/resumo`, {
        headers: this.headers
      });
      console.log('‚úÖ Relat√≥rio obtido:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erro ao obter relat√≥rio:', error.response?.data || error.message);
      throw error;
    }
  }

  async testarSemToken() {
    try {
      console.log('üîí Testando acesso sem token...');
      const response = await axios.get(`${this.baseURL}/api/usuarios`);
      console.log('‚ö†Ô∏è N√£o deveria chegar aqui!', response.data);
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Autentica√ß√£o funcionando - acesso negado sem token');
      } else {
        console.error('‚ùå Erro inesperado:', error.response?.data || error.message);
      }
    }
  }
}

// Fun√ß√£o principal que demonstra todo o fluxo
async function demonstrarAPIGateway() {
  console.log('üö™ DEMONSTRA√á√ÉO DO API GATEWAY');
  console.log('==============================');
  console.log('');

  const cliente = new ClienteAPIGateway();

  try {
    // 1. Verificar gateway
    console.log('1Ô∏è‚É£ VERIFICANDO GATEWAY');
    console.log('---------------------');
    await cliente.verificarGateway();
    console.log('');

    // 2. Verificar servi√ßos
    console.log('2Ô∏è‚É£ VERIFICANDO MICROSERVI√áOS');
    console.log('----------------------------');
    await cliente.verificarServicos();
    console.log('');

    // 3. Testar autentica√ß√£o
    console.log('3Ô∏è‚É£ TESTANDO AUTENTICA√á√ÉO');
    console.log('------------------------');
    await cliente.testarSemToken();
    console.log('');

    // 4. Trabalhar com usu√°rios
    console.log('4Ô∏è‚É£ TRABALHANDO COM USU√ÅRIOS');
    console.log('---------------------------');
    await cliente.listarUsuarios();
    await cliente.buscarUsuario(1);
    await cliente.criarUsuario('Ana Gateway', 'ana.gateway@email.com');
    console.log('');

    // 5. Trabalhar com produtos
    console.log('5Ô∏è‚É£ TRABALHANDO COM PRODUTOS');
    console.log('---------------------------');
    await cliente.listarProdutos();
    await cliente.listarProdutos('Eletr√¥nicos');
    await cliente.buscarProduto(1);
    await cliente.verificarDisponibilidade(1);
    console.log('');

    // 6. Trabalhar com pedidos
    console.log('6Ô∏è‚É£ TRABALHANDO COM PEDIDOS');
    console.log('--------------------------');
    await cliente.listarPedidos();
    await cliente.criarPedido(1, 2, 1); // Usu√°rio 1, Produto 2, Quantidade 1
    await cliente.obterRelatorioPedidos();
    console.log('');

    console.log('‚úÖ DEMONSTRA√á√ÉO CONCLU√çDA COM SUCESSO!');
    console.log('');
    console.log('üí° FUNCIONALIDADES DEMONSTRADAS DO API GATEWAY:');
    console.log('   üîí Autentica√ß√£o centralizada');
    console.log('   üîÑ Roteamento para microservi√ßos');
    console.log('   üìä Monitoramento de sa√∫de dos servi√ßos');
    console.log('   ‚ö° Rate limiting');
    console.log('   üìù Logging centralizado');
    console.log('   üõ°Ô∏è Tratamento de erros');
    console.log('');
    console.log('üéØ O Gateway atua como ponto √∫nico de entrada para m√∫ltiplos servi√ßos!');

  } catch (error) {
    console.error('‚ùå Erro durante demonstra√ß√£o:', error.message);
    console.log('');
    console.log('‚ö†Ô∏è Certifique-se de que todos os servi√ßos est√£o rodando:');
    console.log('   npm run start-all');
  }
}

// Executar demonstra√ß√£o se o script for chamado diretamente
if (require.main === module) {
  demonstrarAPIGateway();
}

module.exports = ClienteAPIGateway; 