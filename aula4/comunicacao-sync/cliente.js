const axios = require('axios');

// Configura√ß√£o base da API
const API_BASE_URL = 'http://localhost:5003';

// Cliente para demonstrar comunica√ß√£o s√≠ncrona
class ClienteAPI {
  constructor() {
    this.baseURL = API_BASE_URL;
  }

  // M√©todo para verificar status da API
  async verificarStatus() {
    try {
      console.log('üîÑ Verificando status da API...');
      const response = await axios.get(`${this.baseURL}/status`);
      console.log('‚úÖ API est√° funcionando:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erro ao verificar status:', error.message);
      throw error;
    }
  }

  // M√©todo para listar todos os usu√°rios
  async listarUsuarios() {
    try {
      console.log('üîÑ Buscando lista de usu√°rios...');
      const response = await axios.get(`${this.baseURL}/usuarios`);
      console.log('‚úÖ Usu√°rios encontrados:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erro ao listar usu√°rios:', error.message);
      throw error;
    }
  }

  // M√©todo para buscar usu√°rio por ID
  async buscarUsuario(id) {
    try {
      console.log(`üîÑ Buscando usu√°rio com ID ${id}...`);
      const response = await axios.get(`${this.baseURL}/usuarios/${id}`);
      console.log('‚úÖ Usu√°rio encontrado:', response.data);
      return response.data;
    } catch (error) {
      if (error.response && error.response.status === 404) {
        console.log('‚ö†Ô∏è Usu√°rio n√£o encontrado');
      } else {
        console.error('‚ùå Erro ao buscar usu√°rio:', error.message);
      }
      throw error;
    }
  }

  // M√©todo para criar novo usu√°rio
  async criarUsuario(nome, email) {
    try {
      console.log(`üîÑ Criando usu√°rio: ${nome} (${email})`);
      const response = await axios.post(`${this.baseURL}/usuarios`, {
        nome,
        email
      });
      console.log('‚úÖ Usu√°rio criado:', response.data);
      return response.data;
    } catch (error) {
      if (error.response && error.response.status === 400) {
        console.log('‚ö†Ô∏è Dados inv√°lidos:', error.response.data.mensagem);
      } else {
        console.error('‚ùå Erro ao criar usu√°rio:', error.message);
      }
      throw error;
    }
  }
}

// Fun√ß√£o principal para demonstrar a comunica√ß√£o s√≠ncrona
async function exemploComumicacaoSincrona() {
  console.log('üöÄ EXEMPLO DE COMUNICA√á√ÉO S√çNCRONA');
  console.log('=====================================');
  console.log('');

  const cliente = new ClienteAPI();

  try {
    // 1. Verificar se a API est√° funcionando
    console.log('1Ô∏è‚É£ VERIFICANDO STATUS DA API');
    console.log('------------------------------');
    await cliente.verificarStatus();
    console.log('');

    // 2. Listar usu√°rios existentes
    console.log('2Ô∏è‚É£ LISTANDO USU√ÅRIOS EXISTENTES');
    console.log('-------------------------------');
    await cliente.listarUsuarios();
    console.log('');

    // 3. Buscar um usu√°rio espec√≠fico
    console.log('3Ô∏è‚É£ BUSCANDO USU√ÅRIO ESPEC√çFICO');
    console.log('------------------------------');
    await cliente.buscarUsuario(1);
    console.log('');

    // 4. Tentar buscar usu√°rio inexistente
    console.log('4Ô∏è‚É£ TESTANDO USU√ÅRIO INEXISTENTE');
    console.log('-------------------------------');
    try {
      await cliente.buscarUsuario(999);
    } catch (error) {
      // Esperado - usu√°rio n√£o existe
    }
    console.log('');

    // 5. Criar novo usu√°rio
    console.log('5Ô∏è‚É£ CRIANDO NOVO USU√ÅRIO');
    console.log('----------------------');
    await cliente.criarUsuario('Ana Oliveira', 'ana@email.com');
    console.log('');

    // 6. Listar usu√°rios novamente para ver o novo
    console.log('6Ô∏è‚É£ LISTANDO USU√ÅRIOS ATUALIZADA');
    console.log('-------------------------------');
    await cliente.listarUsuarios();
    console.log('');

    console.log('‚úÖ EXEMPLO CONCLU√çDO COM SUCESSO!');
    console.log('');
    console.log('üí° CARACTER√çSTICAS DA COMUNICA√á√ÉO S√çNCRONA:');
    console.log('   - Cliente faz requisi√ß√£o e ESPERA pela resposta');
    console.log('   - Servidor processa e retorna imediatamente');
    console.log('   - Comunica√ß√£o via HTTP Request/Response');
    console.log('   - Padr√£o simples e direto');

  } catch (error) {
    console.error('‚ùå Erro durante execu√ß√£o:', error.message);
    console.log('');
    console.log('‚ö†Ô∏è Certifique-se de que o servidor est√° rodando!');
    console.log('   Execute: npm run servidor');
  }
}

// Verificar se o script est√° sendo executado diretamente
if (require.main === module) {
  exemploComumicacaoSincrona();
}

module.exports = ClienteAPI; 